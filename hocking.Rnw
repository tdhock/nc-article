\newcommand{\sectiontidyr}{Comparisons with other functions for data frames}
\newcommand{\sectiontrackDb}{Capturing all matches from a multi-line text file}
\newcommand{\sectiontimings}{Comparing computation times of R regex packages}
\newcommand{\sectiondf}{Creating new columns from character columns in a data frame}
\newcommand{\sectionrex}{Comparing \pkg{namedCapture} variable argument syntax with \pkg{rex}}
\newcommand{\sectioncomparisons}{Comparisons with other R packages}

\title{A new syntax for regular expressions and reshaping using data
  tables and the \pkg{nc} package}

\author{by Toby Dylan Hocking}

\maketitle

\abstract{Regular expressions are powerful tools for manipulating
  non-tabular text data. For many tasks (visualization, machine
  learning, etc), tables of numbers must be extracted from such data
  before processing by other R functions. We present the R package
  \pkg{namedCapture}, which facilitates such tasks by providing a new
  user-friendly syntax for defining regular expressions in R code. We
  begin by describing the history of regular expressions and their
  usage in R. We then describe the new features of the namedCapture
  package, and provide detailed comparisons with related R packages
  (\pkg{rex}, \pkg{stringr}, \pkg{stringi}, \pkg{tidyr},
  \pkg{rematch2}, \pkg{re2r}).}

\section{Introduction}

Today regular expression libraries are powerful and widespread tools
for text processing. A regular expression \dfn{pattern} is
typically a character string that defines a set of possible
\dfn{matches} in some other \dfn{subject} strings. For example
the pattern \code{o+} matches one or more lower-case o characters; it
would match the last two characters in the subject \code{foo}, and it
would not match in the subject \code{bar}. 

The focus of this article is regular expressions with capture groups,
which are used to extract subject substrings. Capture groups are
typically defined using parentheses. For example, the pattern
\code{[0-9]+} matches one or more digits (e.g.\ \code{123} but not
\code{abc}), and the pattern \code{[0-9]+-[0-9]+} matches a range of
integers (e.g.\ \code{9-5}). The pattern \code{([0-9]+)-([0-9]+)} will
perform matching identically, but provides access by number/index to
the strings matched by the capturing sub-patterns enclosed in
parentheses (group 1 matches \code{9}, group 2 matches \code{5}). The
pattern \code{(?P<start>[0-9]+)-(?P<end>[0-9]+)} further provides access
by name to the captured sub-strings (\code{start} group matches
\code{9}, \code{end} group matches \code{5}). In R named capture
groups are useful in order to create more readable regular expressions
(names document the purpose of each sub-pattern), and to create more
readable \R\ code (it is easier to understand the intent of named references than
numbered references).

In this article our original contribution is the \R\ package
\CRANpkg{namedCapture} which provides several new features for named capture
regular expressions. The main new ideas are (1) group-specific type
conversion functions, (2) a user-friendly syntax for defining group
names with \R\ argument names, and (3) named output based on subject names and the
\code{name} capture group. 

The organization of this article is as follows. The rest of this
introduction provides a brief history of regular expressions and their
usage in \R, then gives an overview of current \R\ packages for
regular expressions. The second section describes the proposed
functions of the \pkg{namedCapture} package. The third section
provides detailed comparisons with other \R\ packages, in terms of
syntax and computation times. The article concludes with a summary and
discussion.

\section{Related work}


\begin{table}
  \begin{tabular}{llllllll}
\toprule
\code{pkg::function} & single & multiple & regex & na.rm & types &
list \\
\midrule
\code{nc::capture\_first\_melt\_multiple} & no & unsort & capture &
yes & any & yes\\
\code{nc::capture\_first\_melt} & yes & no & capture & yes & any
& yes\\
\code{tidyr::pivot\_longer} & yes & unsort & capture & yes &
some & yes\\
\code{stats::reshape} & yes & sort & match & no & no & no\\
\code{data.table::melt}, \code{patterns} & yes & sort & match & yes & no &
yes\\
\code{tidyr::gather} & yes & no & no & yes & some & yes\\
\code{reshape2::melt} & yes & no & no & yes & no & no\\
\code{cdata::rowrecs\_to\_blocks} & yes & unsort & no & no &
no & yes\\
\code{utils::stack} & yes & no & no & no & no & no\\
\bottomrule
    \end{tabular}
    \caption{\label{tab:features} Features of reshaping functions available in R.}
\end{table}

<<load>>=
nc::capture_first_melt

@ 

\paragraph{Reproducible research statement.} The source code for this
article can be freely downloaded from
\url{https://github.com/tdhock/nc-article}

\bibliography{hocking}

\address{Toby Dylan Hocking\\
  School of Informatics, Computing, and Cyber Systems\\
  Northern Arizona University\\
  Flagstaff, Arizona\\
  USA\\
  \email{toby.hocking@nau.edu}}

