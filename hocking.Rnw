\newcommand{\sectiontidyr}{Comparisons with other functions for data frames}
\newcommand{\sectiontrackDb}{Capturing all matches from a multi-line text file}
\newcommand{\sectiontimings}{Comparing computation times of R regex packages}
\newcommand{\sectiondf}{Creating new columns from character columns in a data frame}
\newcommand{\sectionrex}{Comparing \pkg{namedCapture} variable argument syntax with \pkg{rex}}
\newcommand{\sectioncomparisons}{Comparisons with other R packages}

\title{Regular expressions and reshaping using data tables and the
  \pkg{nc} package}

\author{by Toby Dylan Hocking}

\maketitle

\abstract{Regular expressions are powerful tools for extracting tables
  from non-tabular text data. Capturing regular expressions that
  describe information to extract from column names can be especially
  useful when reshaping a data table from wide (one row with many
  columns) to tall (one column with many rows). We present the R
  package \pkg{nc}, which provides functions for data reshaping,
  regular expressions, and a uniform interface to three C libraries
  (PCRE, RE2, ICU). We describe the main features of \pkg{nc}, then
  provide detailed comparisons with related R packages (\pkg{stats},
  \pkg{utils}, \pkg{data.table}, \pkg{tidyr}, \pkg{reshape2},
  \pkg{cdata}).}

\section{Introduction}

Regular expressions are powerful tools for text processing that are
available in many programming languages, including R. A regular
expression \dfn{pattern} defines a set of \dfn{matches} in a
\dfn{subject} string. For example, the pattern \code{.*[.].*} matches
zero or more non-newline characters, followed by a period, followed by
zero or more non-newline characters. It would match the subjects
\code{Sepal.Length} and \code{Petal.Width}, but it would not match in
the subject \code{Species}.

The focus of this article is patterns with capture groups, which are
typically defined using parentheses. For example, the pattern
\code{(.*)[.](.*)} results in the same matches as the pattern in the
previous paragraph, and it additionally allows the user to capture and
extract the substrings by group index (e.g. group 1 matches
\code{Sepal}, group 2 matches \code{Length}).

Named capture groups allow extracting the a substring by name rather
than by index. Using names rather than indices is useful in order to
create more readable regular expressions (names document the purpose
of each sub-pattern), and to create more readable \R\ code (it is
easier to understand the intent of named references than numbered
references). For example, the pattern
\code{(?<part>.*)[.](?<dimension>.*)} documents that the flower part
appears before the measurement dimension; the \code{part} group
matches \code{Sepal} and the \code{dimension} group matches
\code{Length}.

Recently, \citet{HOCKING2019-namedCapture} proposed a new syntax for
defining named capture groups in R code. Using this new syntax,
named capture groups are specified using R arguments, 
which results in code that is easier to read and modify than 
capture groups defined in string literals. For example, the
pattern in the previous paragraph can be written as \code{part=".*",}
\code{"[.]",} \code{dimension=".*"}. 
Sub-patterns can be grouped for 
clarity and/or re-used using
lists, and numeric data may be extracted by specifying group-specific
type conversion functions.

In this article our original contribution is the \R\ package
\CRANpkg{nc} which provides a new implementation of the previously
proposed syntax for named capture regular expressions, in addition to
several new features for data reshaping. The main new ideas are (1)
using un-named groups to provide a uniform interface to three regex C
libraries, (2) integration of regex capture groups and \CRANpkg{data.table}
functionality \citep{Dowle2019}, and (3) specifying wide-to-tall reshape operations with
a concise syntax which results in less repetitive user code than other
packages.

The organization of this article is as follows. The rest of this
introduction provides an overview of current \R\ packages for regular
expressions and data reshaping. The second section describes the
proposed functions of the \CRANpkg{nc} package. The third section provides
detailed comparisons with other \R\ packages, in terms of syntax and
computation times. The article concludes with a summary and
discussion.

\section{Related work}




\begin{table}
  \centering
  \begin{tabular}{llllllll}
\toprule
\code{pkg::function} & single & multiple & regex & na.rm & types & list \\
\midrule
\code{nc::capture\_melt\_multiple} & no & unsorted & capture & yes & any & yes\\
\code{nc::capture\_melt\_single} & yes & no & capture & yes & any & yes\\
\code{tidyr::pivot\_longer} & yes & unsorted & capture & yes & some & yes\\
\code{stats::reshape} & yes & sorted & match & no & no & no\\
\code{data.table::melt}, \code{patterns} & yes & sorted & match & yes & no & yes\\
\code{tidyr::gather} & yes & no & no & yes & some & yes\\
\code{reshape2::melt} & yes & no & no & yes & no & no\\
\code{cdata::rowrecs\_to\_blocks} & yes & unsorted & no & no &no & yes\\
\code{utils::stack} & yes & no & no & no & no & no\\
\bottomrule
    \end{tabular}
    \caption{\label{tab:features} 
      Reshaping functions in R support various features:
      ``single'' for converting input columns into a single output column; 
      ``multiple'' for converting input columns 
      (either ``sorted'' in a regular order, or ``unsorted'' for any order) 
      into multiple output columns of different types;
      ``regex'' for regular expressions to 
      only ``match'' input column names or to
      ``capture'' and create new output column names;
      ``na.rm'' for removal of missing values;
      ``types'' for converting input column names to non-character output columns;
      ``list'' for output of list columns.
    }
\end{table}

<<load>>=
nc::capture_melt_single

@ 

\paragraph{Reproducible research statement.} The source code for this
article can be freely downloaded from
\url{https://github.com/tdhock/nc-article}

\bibliography{hocking}

\address{Toby Dylan Hocking\\
  School of Informatics, Computing, and Cyber Systems\\
  Northern Arizona University\\
  Flagstaff, Arizona\\
  USA\\
  \email{toby.hocking@nau.edu}}

